(defpackage :lcs
  (:use :cl)
  (:export :lcs))

(defvar list1 '(A B C B D A B))
(defvar list2 '(B D C A B A))

(in-package :lcs)

(defun show-board (board)
  (loop for i below (car (array-dimensions board)) do
        (loop for j below (cadr (array-dimensions board)) do
              (let ((cell (aref board i j)))
                (format t "~a" cell)))
        (format t "~%")))

(defun lcs (lst1 lst2)
  (let ((m (length lst1)) 
        (n (length lst2)))
    (setf b (make-array (list m n)))
    (setf c (make-array (list m n)))
    (loop for i from 0 to (- m 1)
          do (setf (aref c i 0) 0))
    (loop for j from 0 to (- n 1)
          do (setf (aref c 0 j) 0))
    (loop for i from 1 to (- m 1)
          do (loop for j from 1 to (- n 1)
                   do (if (eq (car lst1) (car lst2))
                        (lambda (c b i j) 
                          (setf (aref c i j) (+ (aref c (- i 1) (- j 1)) 1))
                          (setf (aref b i j) 1) c b i j)
                        (if (>= (aref c (- i 1) j) (aref c i (- j 1)))
                          (lambda (c b i j) 
                            (setf (aref c i j) (aref c (- i 1) j))
                            (setf (aref b i j) 2) c b i j)
                           (lambda (c b i j) 
                             (setf (aref c i j) (aref c i (- j 1)))
                             (setf (aref b i j) 0) c b i j)))))
    (print c)
    (print b)))
